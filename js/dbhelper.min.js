class DBHelper{static openIDB(){var dbPromise=idb.open('mws-db',1,function(upgradeDb){var store=upgradeDb.createObjectStore('rests',{keyPath:'id'});store.createIndex('by-id','id');var rev_store=upgradeDb.createObjectStore('reviews',{keyPath:'id'});rev_store.createIndex('by-id','id')});return dbPromise}
static getIDB(){var dbPromise=DBHelper.openIDB();return dbPromise.then(function(db){if(!db)
return;var store=db.transaction('rests').objectStore('rests');return store.getAll()})}
static insertIDB(restaurants){var dbPromise=DBHelper.openIDB();dbPromise.then(function(db){var tx=db.transaction('rests','readwrite');var store=tx.objectStore('rests');restaurants.forEach(function(rest){store.put(rest)})})}
static fetchRestaurants(callback){var rests=[];var idbRests=DBHelper.getIDB();idbRests.then(function(restaurants){if(restaurants.length){rests=restaurants;return Promise.resolve(restaurants)}
else{fetch('http://localhost:1337/restaurants').then(function(response){rests=response.json();return rests}).then(function(myJson){const restaurants=myJson;DBHelper.insertIDB(restaurants);callback(null,restaurants)}).catch(function(error){callback(error,null)});return rests}}).then(function(myJson){const restaurants=myJson;callback(null,restaurants)}).catch(function(error){callback(error,null)})}
static fetchRestaurantById(id,callback){fetch('http://localhost:1337/restaurants/'+id).then(function(response){return response.json()}).then(function(myJson){const restaurant=myJson;if(restaurant){callback(null,restaurant)}else{callback('Restaurant does not exist',null)}}).catch(function(error){callback(error,null)})}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants
if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine)}
if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood)}
callback(null,results)}})}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
callback(null,uniqueNeighborhoods)}})}
static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
callback(null,uniqueCuisines)}})}
static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`)}
static imageUrlForRestaurant(restaurant){return(`/img/${restaurant.photograph}.jpg`)}
static imageUrlForRestaurant_small(restaurant){return(`/img_200/${restaurant.photograph}.jpg`)}
static imageUrlForRestaurant_medium(restaurant){return(`/img_400/${restaurant.photograph}.jpg`)}
static imageUrlForRestaurant_large(restaurant){return(`/img_800/${restaurant.photograph}.jpg`)}
static imageUrlForRestaurant_mlarge(restaurant){return(`/img_600/${restaurant.photograph}.jpg`)}
static imageAlt(restaurant){var alt=[];alt[1]="People Sitting around a dinning table in a restaurant";alt[2]="Pizza in a plate";alt[3]="Dinning tables and chairs in a restaurant";alt[4]="Katz's Delicatessen restaurant from outside on a street corner";alt[5]="People dinning";alt[6]="People Sitting around a wooden tables in a restaurant and some people standing in line in front of an American flag";alt[7]="Two men standing in front of Superiority Burger one holding a dog leash";alt[8]="A big sign with The Dutch written on it next to it is a flowering tree";alt[9]="Some people around a table with one girl looking at her phone";alt[10]="An empty open kitchen with white chairs and tables";return(alt[restaurant.id])}
static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}
